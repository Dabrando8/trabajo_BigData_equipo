---
title: "Análisis económico y demográfico de España. Retos para los jóvenes españoles"
date: 2023-12-20                
date-format: short
format: 
  revealjs:
    echo: false
    scrollable: true
    slide-level: 2
    height: 900
    width: 1600
    toc: false
    center-title-slide: true
    title-slide-attributes: #- atributos para la slide de titulo
      data-background-color: "#562457"   #- color de R-ladies
    preview-links: auto  #- true: abre un iframe en lugar de abrir ventana
    link-external-newwindow: true
    transition: fade
    fontcolor: "#262d36"
    highlight-style: a11y
    code-line-numbers: true
    number-sections: false
    slide-number: c/t  
    incremental: false   
footer: |
  Slides hechas con [Quarto](https://quarto.org/) 
#theme: moon
---

## Introducción

En este trabajao primero observaremos algunas variables macroeconómicas de España para situar al país en contexto. Después, veremos distintos datos demográficos para realizar algunas proyecciones a futuro sobre trabajo y estudios.

---

## Datos

Los datos utilizados para la elaboración de este trabajo han sido extraídos del FRED pero, en su mayoría, del INE, tanto en formato excel como en px

```{r}

library(tidyverse)
library(pxR)
library(tidyr)
library(dplyr)
library(ggplot2)
library(gganimate)
library(readxl)
library(sf) 
library(ggthemes)
library(plotly)
library(viridis)
library(gganimate)
library(treemap)
library(treemapify) 
library(RColorBrewer)
library(stringr)
library(ggrepel)
library(purrr)
library(flexdashboard)

Demografia_edad_sexo <- read.px("datos/Demografia_edad_sexo.px") %>% as.data.frame()
Demografia_provincias <- read.px("datos/Demografia_provincias.px") %>% as.data.frame()
Epa_Paro_comunidades <- read.px("datos/Epa_Paro_comunidades.px") %>% as.data.frame()
Epa_Paro_provincias <- read.px("datos/Epa_Paro_provincias.px") %>% as.data.frame()
Graduados_en_2019_de_graduados_en_2014 <- read.px("datos/Graduados_en_2019_de_graduados_en_2014.px") %>% as.data.frame()
Inflacion_mensual <- read_excel("datos/Inflacion_mensual.xlsx") %>% as.data.frame()
Insercion_en_2019_de_graduasos_en_2014 <- read.px("datos/Insercion_en_2019_de_graduados_en_2014.px") %>% as.data.frame()
Insercion_laboral <- read.px("datos/Insercion_laboral.px") %>% as.data.frame()
IPC_por_sectores <- read.px("datos/IPC_por_sectores.px") %>% as.data.frame()
IPC_vivienda <- read.px("datos/IPC_vivienda.px") %>% as.data.frame()
Proyeccion_demografia <- read.px("datos/Proyeccion_demografia.px") %>% as.data.frame()
Renta_media <- read.px("datos/Renta_media.px") %>% as.data.frame()
Sin_hogar <- read.px("datos/Sin_hogar.px") %>% as.data.frame()
pib <- read_excel("datos/pib.xls") %>% as.data.frame()
pib_ccaa <- read_excel("datos/pib_ccaa.xls") %>% as.data.frame()
pib_ccaa_top5 <- read_excel("datos/pib_ccaa_top5.xls") %>% as.data.frame()
poblacion <- read_excel("datos/poblacion .xls") %>% as.data.frame()
poblacion_ccaa <- read_excel("datos/poblacion_ccaa.xls") %>% as.data.frame()
poblacion_inmigrante <- read_excel("datos/poblacion_inmigrante.xls") %>% as.data.frame()
```

---

## Variables económicas

Empezaremos poniendo a España en su contexto económico.

---

## PIB

```{r}
ruta_archivo <- "./datos/pib.xls"
df_PIB <- read_excel(ruta_archivo)

grafa <- ggplot(data = df_PIB, aes(x = Fecha, y = pib)) +
  geom_line(color = "blue", size = 2) +
  labs(x = "Año", y = "PIB(en millones)", title = "Producto Interior Bruto España (1995-2020)",
       caption = "Elaboración propia a partir de datos del INE") +
  theme_economist() +
  annotate("rect",
           xmin = as.POSIXct("2008-01-01"), 
           xmax = as.POSIXct("2014-01-01"),  
           ymin = -Inf,
           ymax = Inf,
           alpha = 0.2,
           fill = "red") +
  annotate(geom = "text",
           x = as.POSIXct("2011-01-01"),  
           y = 1200000,  
           label = "Crisis inmobiliaria",
           size = 5) +
  annotate("rect",
           xmin = as.POSIXct("2019-01-01"), 
           xmax = as.POSIXct("2022-01-01"),  
           ymin = -Inf,
           ymax = Inf,
           alpha = 0.2,
           fill = "red")+
  annotate(geom = "text",
           x = as.POSIXct("2019-01-01"),  
           y = 1300000,  
           label = "Crisis Coronavirus",
           size = 5) +
  coord_cartesian(xlim = as.POSIXct(c("1995-01-01", "2023-01-01")),   
                  ylim = c(600000, 1400000)) 
grafa
```

---

##PIB top5 CCAA

```{r}
ruta_archivo <- "./datos/pib_ccaa_top5.xls"
df_PIB_CCAA_TOP5 <- read_excel(ruta_archivo)
df_PIB_CCAA_TOP5 <- na.omit(df_PIB_CCAA_TOP5)


df_PIB_CCAA_TOP5<- df_PIB_CCAA_TOP5 %>% 
  pivot_longer(cols = 2:7, names_to = "Fecha")

df_PIB_CCAA_TOP5$Comunidad_Autonoma <- as.factor(df_PIB_CCAA_TOP5$Comunidad_Autonoma)

grafico_3<-ggplot(data = df_PIB_CCAA_TOP5, aes(x = Fecha, y = value, color = Comunidad_Autonoma, group = Comunidad_Autonoma)) +
  geom_line(size = 1) +
  labs(x = "Año", y = "PIB(en miles)", 
       title = "Producto Interior por CCAA (2016-2021)",
       caption = "Elaboración propia a partir de datos del INE") +
  theme_solarized_2()+theme(legend.position = "none")+scale_y_continuous(labels = scales::comma)

ggplotly(grafico_3)
```

---

##PIB resto CCAA

```{r}
ruta_archivo <- "./datos/pib_ccaa.xls"
df_PIB_CCAA <- read_excel(ruta_archivo)
df_PIB_CCAA <- na.omit(df_PIB_CCAA)


df_PIB_CCAA<- df_PIB_CCAA %>% 
  pivot_longer(cols = 2:7, names_to = "Fecha")

df_PIB_CCAA$Comunidad_Autonoma <- as.factor(df_PIB_CCAA$Comunidad_Autonoma)

grafico_2<-ggplot(data = df_PIB_CCAA, aes(x = Fecha, y = value, color = Comunidad_Autonoma, group = Comunidad_Autonoma)) +
  geom_line(size = 1) +
  labs(x = NULL, y = "PIB(en miles)", 
       title = "Producto Interior por CCAA (2016-2021)",
       caption = "Elaboración propia a partir de datos del INE") +
  theme_solarized_2()+theme(legend.position = "none")+scale_y_continuous(labels = scales::comma)

ggplotly(grafico_2)
```

---

## Renta media por comunidades 

---

### Renta media

```{r}
df_Renta_media <- Renta_media %>%
  drop_na() %>%
  rename(Comunidad = Unidades.territoriales, rentamedia = value) %>%
  arrange(desc(Periodo)) %>%
  filter(Indicadores.de.renta.media == "Renta neta media por persona") %>%
  filter(Comunidad %in% c("Andalucía", "Aragón", "Asturrias, Principado de", "Balears, Illes", "Canarias", "Cantabria", "Castilla y León", "Castilla - La Mancha", "Cataluña", "Comunitat Valenciana", "Extremadura", "Galicia", "Madrid, Comunidad de", "Murcia, Región de", "Navarra, Comunidad Foral de", "País Vasco", "Rioja, La", "Ceuta", "Melilla"))

df_Renta_media$Periodo <- factor(df_Renta_media$Periodo, levels = sort(unique(df_Renta_media$Periodo), decreasing = TRUE))

grafo1 <- df_Renta_media %>%
  ggplot(aes(x=Periodo, y=rentamedia, group=Comunidad, color=Comunidad)) +
    geom_line() +
  labs(x = NULL, y = "Valor en euros", 
       title = "Renta media por CCAA (2016-2021)") +
    theme_solarized() 
ggplotly(grafo1)
```

---

## Comunidades de mayor renta media en 2021

```{r}
df_top_renta_media <- df_Renta_media %>%
  filter(Periodo == "2021") %>%
  slice_max(rentamedia, n = 5) 

grafo2 <- df_top_renta_media %>%
ggplot(aes(x=Comunidad, y=rentamedia, group=Comunidad, color=Comunidad)) +
  labs(x = NULL, y = "Renta media en euros", 
       title = "5 mayores comunidades autónomas por renta media en euros") +
  geom_bar(stat = "identity") +
  theme_clean() 
ggplotly(grafo2)
```

---

## Comunidades de mayor renta media en 2021 (minimalista)

```{r}
df_top_renta_media <- df_Renta_media %>%
  filter(Periodo == "2021") %>%
  slice_max(rentamedia, n = 5) 

grafo2 <- df_top_renta_media %>%
ggplot(aes(x=Periodo, y=rentamedia, group=Comunidad, color=Comunidad)) +
  labs(x = NULL, y = "Renta media en euros", 
       title = "5 mayores comunidades autónomas por renta media en euros") +
  geom_point() +
  theme_clean() 
ggplotly(grafo2)
```

---

## IPC de la vivienda

```{r}
df_filtrado <- IPC_vivienda %>%
  filter(Comunidades.y.Ciudades.Autónomas == "Nacional",
         Índices.y.tasas %in% c("Índice", "Variación en lo que va de año"),
         General..vivienda.nueva.y.de.segunda.mano %in% c("Vivienda nueva", "Vivienda segunda mano")) %>%
  mutate(Anio = as.numeric(str_sub(Periodo, 1, 4)), # Extraer el año
         Trimestre = as.numeric(str_sub(Periodo, 6, 6)), # Extraer el trimestre
         MesInicio = case_when(
           Trimestre == 1 ~ 1,
           Trimestre == 2 ~ 4,
           Trimestre == 3 ~ 7,
           Trimestre == 4 ~ 10
         ),
         Fecha = as.Date(paste(Anio, MesInicio, "01", sep = "-"))) %>% # Construir la fecha
  arrange(Fecha) # Ordenar los datos por la nueva columna de fecha

p <- ggplot(df_filtrado, aes(x = Fecha, y = value, group = interaction(Índices.y.tasas, General..vivienda.nueva.y.de.segunda.mano), color = interaction(Índices.y.tasas, General..vivienda.nueva.y.de.segunda.mano))) +
  geom_line() +
  theme_minimal() +
  labs(title = "Evolución del Índice y Variación de Viviendas Nuevas y de Segunda Mano",
       x = "Fecha",
       y = "Valor",
       color = "Combinación")+
  scale_y_continuous(sec.axis = sec_axis(~ ., name = "Variación en lo que va de año"))
p

# Añadir animación
p2 <- animacion <- p + transition_reveal(Fecha)
p2
```

---

## IPC de la vivienda (2)

```{r}
df_vivienda <- IPC_vivienda %>%
  filter(Comunidades.y.Ciudades.Autónomas == "Nacional",
         Índices.y.tasas %in% c("Índice", "Variación anual"),
         General..vivienda.nueva.y.de.segunda.mano %in% c("Vivienda nueva", "Vivienda segunda mano")) %>%
  mutate(Anio = as.numeric(str_sub(Periodo, 1, 4)), # Extraer el año
         Trimestre = as.numeric(str_sub(Periodo, 6, 6)), # Extraer el trimestre
         MesInicio = case_when(
           Trimestre == 1 ~ 1,
           Trimestre == 2 ~ 4,
           Trimestre == 3 ~ 7,
           Trimestre == 4 ~ 10
         ),
         Fecha = as.Date(paste(Anio, MesInicio, "01", sep = "-"))) %>% 

arrange(Fecha) 


gr_vivienda <- ggplot(df_vivienda, aes(x = Fecha, y = value, 
                             group = interaction(Índices.y.tasas, General..vivienda.nueva.y.de.segunda.mano), 
                             color = interaction(Índices.y.tasas, General..vivienda.nueva.y.de.segunda.mano))) +
  geom_line() +
  theme_minimal() +
  labs(title = "Indice de precios de la vivienda en España",
       x = "Fecha",
       y = "Valor del Índice (Base 2015)",
       color = "Guía") +
  scale_y_continuous(sec.axis = sec_axis(~ ., name = "Variación anual en %")) +
  scale_color_manual(values = c("red", "green", "blue", "brown"), 
                     labels = c("Índice (V. Nueva)", "△% (V. Nueva)", "Índice (2ª Mano)", "△% (2ª Mano)"))  
gr_vivienda

gr_vivienda <- gr_vivienda + theme(legend.background = element_rect(fill="#EAF2F8",
                                                 size=0.5, linetype="solid", 
                                                 colour ="darkblue"))
gr_vivienda

# Añadir animación
gr_vivienda_anim <- animacion <- gr_vivienda + transition_reveal(Fecha)
gr_vivienda_anim

```

---

## TREEMAPS

```{r}
df_vivienda_T4 <- IPC_vivienda %>%
  filter(Índices.y.tasas == "Variación anual",
         General..vivienda.nueva.y.de.segunda.mano == "General",
         str_detect(Periodo, "T4"))
  
resultado_viv <- df_vivienda_T4 %>%
  group_by(Comunidades.y.Ciudades.Autónomas) %>%
  do(Suma_de_Value = sum(.$value, na.rm = TRUE)) %>%
  ungroup()

#ELIMINA LOS NUMERO DE COMUNIDADES
resultado_viv <- resultado_viv %>%
  mutate(Comunidades.y.Ciudades.Autónomas = gsub("^\\d+\\s+", "", Comunidades.y.Ciudades.Autónomas))

resultado_viv$Suma_de_Value <- as.numeric(resultado_viv$Suma_de_Value)

# DataFrame con Suma de Value positivos
df_positivos_viv <- resultado_viv %>%
  filter(Suma_de_Value > 0)

# DataFrame con Suma de Value negativos
df_negativos_viv <- resultado_viv %>%
  filter(Suma_de_Value < 0)

## HAY QUE CONSIDERAR QUE CATALUÑA ES MUY GRANDE ENTONCES PUEDE QUE EN BARCELONA SI HAYAN AUMENTOS MUY ELEVADOS, MIENTRAS QUE EN LAS ZONAS RURALES HAYAN GRANDES DESCENSOS

##Nueva columna con logaritmos para reducir las diferencias de los bloques
df_positivos_viv <- df_positivos_viv %>%
  mutate(Suma_de_Value_Log = log1p(Suma_de_Value))  # Logaritmo natural más 1 para evitar log(0)

##Debemos transformarlos a positivos ya que hay que hacer logaritmos
df_negativos_viv <- df_negativos_viv %>%
  mutate(Suma_de_Value = ifelse(Suma_de_Value < 0, abs(Suma_de_Value), Suma_de_Value))

##Nueva columna con logaritmos para reducir las diferencias de los bloques
df_negativos_viv <- df_negativos_viv %>%
  mutate(Suma_de_Value_Log = log1p(Suma_de_Value))  


# Crear el treemap
p_viv_positive <- ggplot(df_positivos_viv, aes(area = Suma_de_Value_Log, label = paste(Comunidades.y.Ciudades.Autónomas, Suma_de_Value, sep = "\n"))) +
  geom_treemap(fill = "green", colour = "black", size = 1.5) +
  geom_treemap_text(colour = "black", place = "centre", size = 10) +
  theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
  coord_fixed(ratio = 1.2)# Agregar un borde alrededor del gráfico
p_viv_positive




p_viv_negative <- ggplot(df_negativos_viv, aes(area = Suma_de_Value_Log, label = paste(Comunidades.y.Ciudades.Autónomas, paste0("-", Suma_de_Value), sep = "\n"))) +
  geom_treemap(fill = "red", colour = "black", size = 1.5) +  
  geom_treemap_text(colour = "black", place = "centre", size = 10) +
  theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
  coord_fixed(ratio = 1.2)
p_viv_negative
```

---

## Sintecho

```{r}
df_sin_hogar <- Sin_hogar %>%
  drop_na() %>%
  rename(ccaa = Comunidades.y.Ciudades.Autónomas.de.ubicación.del.centro, motivo = Razones.para.abandonar.el.alojamiento) %>%
  filter(ccaa == "Total Nacional") 

grafo3 <- df_sin_hogar %>%
    arrange(value) %>%
    ggplot( aes(x=motivo, y=value) ) +
      geom_bar(stat="identity", fill="#69b3a2") +
      coord_flip() +
      theme_solarized_2() +
      theme(
        panel.grid.minor.y = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position="none"
      ) +
      xlab("") +
      ylab("Porcentaje") 
ggplotly(grafo3)
```

---

## Desempleo por comunidades

```{r}
df_paro_ccaa <- Epa_Paro_comunidades %>%
  filter(Edad == "Total", Sexo == "Ambos sexos") 

grafo4 <- ggplot(df_paro_ccaa, aes(x = Comunidades.y.Ciudades.Autónomas, y = value, fill = Comunidades.y.Ciudades.Autónomas)) +
  geom_bar(stat = "identity") +
  labs(
    title = "Desempleo por Comunidades Autónomas",
    x = "CA",
    y = "Desempleo",
    fill = "CA"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none",
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(face = "bold"),
    axis.text = element_text(size = 10),
    axis.line = element_line(color = "black")
  ) 
grafo4
```

---

## Por edad

```{r}
df_paro_edad <- Epa_Paro_comunidades %>%
  select(Edad, Sexo, value) %>%
  filter(Sexo == "Ambos sexos", Edad != "Total")

grafo5 <- ggplot(df_paro_edad, aes(x = Edad, y = value, fill =Edad)) +
  geom_bar(stat = "identity") +
  labs(
    title = "Desempleo por Edad",
    x = "Intervalo de edad",
    y = "Desempleo",
    fill = "Edad"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 40, hjust = 1),
    legend.position = "none",
    plot.title = element_text(face = "bold", size = 12),
    axis.title = element_text(face = "bold"),
    axis.text = element_text(size = 10),
  ) 
grafo5
```

---

## Por sexo

```{r}
df_paro_sexo <- Epa_Paro_comunidades %>%
  drop_na() %>%
  select(Sexo, value) %>%
  filter(Sexo != "Ambos sexos")

grafo6 <- ggplot(df_paro_sexo, aes(x = Sexo, y = value)) +
  geom_bar(stat = "identity") +
  labs(
    title = "Desempleo por sexo",
    x = "Sexo",
    y = "Desempleo",
    fill = "Sexo"
  ) 
grafo6
```

## Demografía

Ahora vamos a ver algunos datos demográficos 

---

#Población inmigrante por origen

```{r}
ruta_archivo <- "./datos/poblacion_inmigrante.xls"
df_poblacion_inmigrante <- read_excel(ruta_archivo)

df_poblacion_inmigrante<- df_poblacion_inmigrante %>% 
  pivot_longer(cols = 2:21, names_to = "fecha")

grafico_4<-ggplot(data = df_poblacion_inmigrante, aes(x = fecha, y = value, color = origen, group = origen)) +
  geom_line(size = 1) +
  labs(x = "Año", y = NULL, 
       title = "Población inmigrante por procedencia",
       caption = "Elaboración propia a partir de datos del INE") +
  theme_solarized_2()+theme(legend.position = "none")

ggplotly(grafico_4)
```

---

#Población por CCAA

A continuación, tenemos un gráfico de barras 

```{r}
ruta_archivo<-"./datos/poblacion_ccaa.xls"
df_poblacion_ccaa<-read_excel(ruta_archivo)

orden_columnas <- c(1, order(names(df_poblacion_ccaa)[-1]) + 1)

df_poblacion_ccaa <- df_poblacion_ccaa[, orden_columnas]

df_poblacion_ccaa<- df_poblacion_ccaa %>% 
  pivot_longer(cols = 2:26, names_to = "fecha")

df_poblacion_ccaa <- df_poblacion_ccaa[order(-df_poblacion_ccaa$value), ]

grafico_5 <- ggplot(df_poblacion_ccaa, aes(x = reorder(CCAA, -value), y = value)) +
  geom_bar(stat = "identity", fill = "darkcyan") +
  labs(title = "Población por Comunidad Autónoma", x = "Comunidad Autónoma", y = "Población") +
  theme_solarized() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.position = "none")+scale_y_continuous(labels = scales::comma) 

grafico_5
```
---

## Pirámide poblacional

```{r}
url <- 'https://www.populationpyramid.net/api/pp/724/2023/?csv=true'
data <- read.csv(url)
head(data)
data <- data%>%
  pivot_longer(names_to = 'Gender', values_to = 'Population', cols = 2:3) %>%
  mutate(PopPerc=case_when(Gender=='M'~round(Population/sum(Population)*100,2),
                           TRUE~-round(Population/sum(Population)*100,2)),
         signal=case_when(Gender=='M'~1,
                          TRUE~-1))
head(data)
levels(data$Age)
data$Age <- factor(data$Age,levels=unique(data$Age),ordered=TRUE)

grafico_6<-ggplot(data)+
  geom_bar(aes(x=Age,y=PopPerc,fill=Gender),stat='identity')+
  geom_text(aes(x=Age,y=PopPerc+signal*.3,label=abs(PopPerc)))+
  coord_flip()+
  scale_fill_manual(name='',values=c('darkred','steelblue'))+
  scale_y_continuous(breaks=seq(-10,10,1),
                     labels=function(x){paste(abs(x),'%')})+
  labs(x='',y='Población (%)',
       title='Pirámide poblacional de España',
       subtitle=paste('Población residente en 2023', format(sum(data$Population),big.mark='.')),
       caption='Fuente: Elaboración propia a partir de datos de PopulationPyramid.net')+
  cowplot::theme_cowplot()+
  theme(axis.text.x=element_text(vjust=.5),
        panel.grid.major.y = element_line(color='lightgray',linetype='dashed'),
        legend.position = 'top',
        legend.justification = 'center')
ggplotly(grafico_6)
```

---

## INSERCION LABORAL

```{r}
Insercion_merc_laboral <- read.px("datos/Insercion_en_2019_de_graduados_en_2014.px") %>% as.data.frame()

nombres_reemplazo <- c(
  "Formación de docentes de enseñanza infantil" = "Enseñanza infantil",
  "Ciencias sociales y del comportamiento (Otros estudios)" = "C_Sociales",
  "Formación de docentes de enseñanza primaria" = "Enseñanza primaria",
  "Técnicas audiovisuales y medios de comunicación" = "Teleco",
  "Educación (Otros estudios)" = "Otra educacion",
  "Artes (Otros estudios)" = "Otras artes",
  "Actividades físicas y deportivas" = "Deporte",
  "Agricultura y ganadería" = "Agricultura",
  "Arquitectura y construcción" = "Arquitectura",
  "Ciencias químicas, físicas y geológicas" = "Ciencias fisicas",
  "Dirección y administración" = "Administracion",
  "Industria manufacturera y producción" = "Industria",
  "Ingeniería y profesiones afines" = "Ingenieria",
  "Matemáticas y estadística" = "Mates",
  "Negocios y administración (Otros estudios)" = "Negocios",
  "Periodismo y documentación" = "Periodismo",
  "Salud (Otros estudios)" = "Salud",
  "Servicios (Otros estudios)" = "Servicios",
  "Viajes, turismo y ocio" = "Turismo",
  "02 - ARTES Y HUMANIDADES" = "02 - ARTES",
  "03 - CIENCIAS SOCIALES, PERIODISMO Y DOCUMENTACIÓN" = "03 - C_SOCIALES",
  "04 - NEGOCIOS, ADMINISTRACIÓN Y DERECHO" = "04 - NEGOCIOS",
  "07 - INGENIERÍA, INDUSTRIA Y CONSTRUCCIÓN" = "07 - INGENIERIA",
  "08 - AGRICULTURA, GANADERÍA, SILVICULTURA, PESCA Y VETERINARIA" = "08 - AGRICULTURA",
  "TOTAL" = "Promedio",
  "09 - SALUD Y SERVICIOS SOCIALES" = "09 - SALUD")

replace_patterns <- function(text, patterns) {
  for (original in names(patterns)) {
    text <- gsub(original, patterns[original], text, fixed = TRUE)
  }
  return(text)
}

df_insercion_corregido <- Insercion_merc_laboral %>%
  mutate(Ámbito.de.estudio = map_chr(Ámbito.de.estudio, replace_patterns, nombres_reemplazo))


# Suponiendo que tu data frame se llama df
# y la primera columna se llama "Columna1"

# Filtrar las filas que contienen "Tasa de paro" en la primera columna
df_paro <- df_insercion_corregido[df_insercion_corregido$Tasas.de.actividad..empleo.y.paro == "Tasa de paro" & df_insercion_corregido$value != 0, ] 


# Calcular el valor máximo de 'value' para cada 'Cat_principal' único
df_paro_max <- df_paro %>%
  mutate(Cat_principal = ifelse(Ámbito.de.estudio == "Promedio", "11 - MEDIA", 
                                ifelse(grepl("^[0-9]+ -", Ámbito.de.estudio), Ámbito.de.estudio, NA))) %>%
  mutate(Ámbito.de.estudio = ifelse(grepl("^[0-9]+ -", Ámbito.de.estudio), 
                                    paste0(sub(" -.*", "", Ámbito.de.estudio), "_media"), 
                                    Ámbito.de.estudio)) %>%
  fill(Cat_principal, .direction = "down") %>%
  # Extraer la parte numérica de Cat_principal y convertirla a numérico
  mutate(Cat_principal_num = as.numeric(str_extract(Cat_principal, "^[0-9]+"))) %>%
  # Ordenar por la columna numérica
  arrange(Cat_principal_num)
df_paro_max <- na.omit(df_paro_max)

# Inicializar un DataFrame vacío para almacenar los resultados
valores_maximos <- data.frame(Cat_principal = character(), 
                              CCAA.de.su.universidad = character(), 
                              max_value = numeric(), 
                              stringsAsFactors = FALSE)

# Asegurarse de que los nombres de las columnas son correctos
lista_df <- split(df_paro_max, list(df_paro_max$Cat_principal, df_paro_max$CCAA.de.su.universidad))

# Calcular el valor máximo para cada combinación de 'Cat_principal' y 'CCAA.de.su.universidad'
for (i in seq_along(lista_df)) {
  if (nrow(lista_df[[i]]) > 0) {  # Solo si hay filas en el dataframe
    max_value <- max(lista_df[[i]]$value, na.rm = TRUE)
    if (!is.infinite(max_value)) {  # Solo si hay un valor máximo finito
      cat_principal <- lista_df[[i]]$Cat_principal[1]  # Tomar el primer valor
      ccaa_estudio <- lista_df[[i]]$CCAA.de.su.universidad[1]  # Tomar el primer valor
      valores_maximos <- rbind(valores_maximos, data.frame(Cat_principal = cat_principal,
                                                           CCAA.de.su.universidad = ccaa_estudio,
                                                           max_value = max_value))
    }
  }
}

# Asumiendo que df_nacion y valores_maximos ya están definidos y preparados correctamente
# Unir valores_maximos con df_nacion para agregar la columna max_value
df_max_value <- df_paro_max %>%
  left_join(valores_maximos, by = c("Cat_principal", "CCAA.de.su.universidad")) %>%
  mutate(max_value = ifelse(value == max_value, max_value, NA))

df_max_value <- df_max_value %>%
  mutate(Ámbito.de.estudio = ifelse(Ámbito.de.estudio == "06_media", "Informatica", Ámbito.de.estudio)) 

# Crear df_media filtrando tanto "media" como "Informatica como Promedio"
df_medias <- df_max_value %>%
  filter(str_detect(Ámbito.de.estudio, "media|Informatica|Promedio")) %>%
  select(-max_value)

df_sin_medias <- df_max_value %>%
  filter(!(Ámbito.de.estudio %in% df_medias$Ámbito.de.estudio) | Ámbito.de.estudio == "Informatica" | Ámbito.de.estudio == "Promedio")

df_sin_medias <- df_sin_medias %>%
  arrange(Cat_principal, CCAA.de.su.universidad, desc(value)) %>%
  group_by(Cat_principal, CCAA.de.su.universidad) %>%
  mutate(next_value = lead(value, default = 0),
         next_cat = lead(Cat_principal),
         next_ccaa = lead(CCAA.de.su.universidad),
         next_lower_value = ifelse(Cat_principal == next_cat & CCAA.de.su.universidad == next_ccaa, next_value, NA)) %>%
  mutate(next_lower_value = ifelse(is.na(next_lower_value), 0, next_lower_value)) %>%
  mutate(segment_start = next_lower_value,
         segment_end = value) %>%
  ungroup() %>%
  select(-next_value, -next_cat, -next_ccaa) # Eliminar las columnas temporales


## NACION

df_sin_medias_nacion <- df_sin_medias %>% filter(CCAA.de.su.universidad == "Total nacional")
df_medias_nacion <- df_medias %>% filter(CCAA.de.su.universidad == "Total nacional")

# Convertir Cat_principal a un factor ordenado
df_sin_medias_nacion$Cat_principal <- fct_inorder(df_sin_medias_nacion$Cat_principal)
df_medias_nacion$Cat_principal <- fct_inorder(df_medias_nacion$Cat_principal)

p_paro_nacion <- ggplot() +
  geom_rect(data = df_sin_medias_nacion, aes(xmin = as.numeric(Cat_principal) - 0.4, 
                                             xmax = as.numeric(Cat_principal) + 0.4, 
                                             ymin = segment_start, 
                                             ymax = segment_end, fill = segment_end, 
                                             alpha = Cat_principal), stat = "identity") +  # Mapea alpha a Cat_principal
  scale_alpha_discrete(range = c(1, 1), name = "Categoría de estudios") +  # Esto hace que alpha sea constante, pero aún crea la leyenda
  geom_point(data = df_medias_nacion, aes(x = as.numeric(Cat_principal), y = value), color = "black", size = 3) +
  geom_text(data = df_sin_medias_nacion, aes(x = as.numeric(Cat_principal), y = value, label = Ámbito.de.estudio), 
            size = 3) +
  scale_fill_gradientn(colours = brewer.pal(8, "Set2"), name = "Escala de colores") +
  labs(title = "Tasa de paro según el estudio cursado",
       x = "Categoría y subcategoría de estudios",
       y = "Tasa de paro (%)") +
  scale_x_continuous(breaks = as.numeric(unique(df_sin_medias_nacion$Cat_principal)), labels = function(x) substr(x, 1, 2)) +
  theme_minimal() +
  theme(legend.position="right")  # Coloca la leyenda en la derecha
p_paro_nacion

```




